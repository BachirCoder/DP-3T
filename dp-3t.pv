(*
Protocol: DP-3T
Modeler: Bachir Bendrissou
Sources:
 [S] https://blog.symbolic.software/2020/04/05/dp-3t-verifpal/
 [OS] https://github.com/DP-3T/documents
 [OS-l] ...
Footnote:
[1] We model each day as a phase, ex: phase 0 for day 0.
[2] We model the extreme case where everyone exchange EphIDs with everyone every day.
    If the protocol is secure in this special case, than it must be secure in all other cases.
*)

free c:channel.
free c_ab:channel [private]. (* private channel for Alice and Bob *)
free c_ac:channel [private]. (* private channel for Alice and Charlie *)
free c_bc:channel [private]. (* private channel for Bob and Charlie *)
free c_bs:channel [private]. (* Backend Server and the Healthcare Authority share a secure connection *)
free c_a:channel.
free c_b:channel.
free c_c:channel.
free A, B, C: bitstring. (* Alice, Bob, and Charlie *)
free BroadcastKey: bitstring.
type skey.

(* We declare 3 tables to store exchanged ephemeral values. *)
table eph_values_a(bitstring) .
table eph_values_b(bitstring).
table eph_values_c(bitstring).

fun hmac(skey,bitstring, bitstring):bitstring. (* hmac/2 a function to derive ephemeral value from the secret key of the sender and the identity of the receiver *)
fun h(skey):skey. (* h/1, a hash function to derive a new secret key from yesterday's secret key *)

(* symmetric crypto *)
fun senc(skey,bitstring):bitstring. (* enc/2 *)
reduc forall k:skey, m:bitstring; sdec(k,senc(k,m)) = m.

(* AEAD: Authenticated Encryption with Associated Data *)
(* Encryption scheme *)
fun encrypt(skey, skey, bitstring): bitstring.
reduc forall x:skey, k:skey, r:bitstring; decrypt(encrypt(x,k,r),k,r) = x.

(* Function for generating Ephs *)
fun eph_key(skey):skey [private]. (* eph/1 *)

(* pairs *)
(* c) Model pairs with constructor pair/2 and destructors fst and snd. *)
fun pair(bitstring,bitstring):bitstring. (* pair/2 *)

reduc forall m1:bitstring,m2:bitstring; fst(pair(m1,m2))=m1.
reduc forall m1:bitstring,m2:bitstring; snd(pair(m1,m2))=m2.

fun RequestToken():bitstring. (* A constant *)

(* events *)
event Here().
event Ok().
event ProFinished(). (* Event when the protocol has finished all phases *)
event ProStep().     (* Some event at some point *)
event Infected(bitstring).

(* queries *)
query event(Here()).
query attacker(C).
query attacker(BroadcastKey).
query event(Infected(C)).

(* Process for Ephs-exchange initializer *)
let ini_exch(sender: bitstring, receiver: bitstring, senderkey: skey, pc:channel) =
	let ephv = hmac(senderkey, receiver, BroadcastKey) in
	out(pc, pair(sender, ephv));
	in(pc, xeph:bitstring);
	let x = snd(xeph) in
	if sender = A then
    insert eph_values_a(x)
	else if sender = B then
    insert eph_values_b(x).

(* Process for Ephs-exchange responder*)
let resp_exch(c:channel, receiver: bitstring, senderrrr: bitstring, receiverkey: skey) =
  in(c, xeph:bitstring);
  let sender = fst(xeph) in
	let eph = snd(xeph) in
  let x = hmac(receiverkey, sender, BroadcastKey) in
  out(c, pair(receiver, x));
  if receiver = B then
    insert eph_values_b(eph)
	else if receiver = C then
    insert eph_values_c(eph).

(* Report infection *)
let report_inf(sender: bitstring, senderKey: skey, ephKey: skey) =
  out(c, RequestToken());
  event Infected(sender);
  in(c, encToken:bitstring);
  let token = sdec(ephKey, encToken) in
  let msg = encrypt(senderKey, ephKey, token) in
  out(c, msg).

let healthCareAuthority(ephKeyA: skey) =
  in(c, xr:bitstring);
  if xr = RequestToken() then
  new token:bitstring;
  out(c_bs, senc(ephKeyA, token));
  out(c, senc(ephKeyA, token)).

let backendServer(ephKey: skey) =
  in(c_bs, encToken:bitstring); (* Receive encrypted token from healthCareAuthority via private channel *)
  let x = sdec(ephKey, encToken) in
  in(c, y:bitstring);
  let ym = decrypt(y, ephKey, x) in
  out(c_a, ym); event Here(). (* Send out infectedPatients1 *)

process
	new skA : skey ; new skB : skey ; new skC : skey ; new ephemeral_skA : skey ; new ephemeral_skB : skey ; new ephemeral_skC : skey;
	( ini_exch(A, B, skA, c_ab) | resp_exch(c_ab, B, A, skB) |
	  ini_exch(A, C, skA, c_ac) | resp_exch(c_ac, C, A, skC) |
    ini_exch(B, C, skB, c_bc) | resp_exch(c_bc, C, B, skC) |
    phase 1; let skA1 = h(skA) in
	  let skB1 = h(skB) in
	  let skC1 = h(skC) in
	  ini_exch(A, B, skA1, c_ab) | resp_exch(c_ab, B, A, skB1) |
	  ini_exch(A, C, skA1, c_ac) | resp_exch(c_ac, C, A, skC1) |
	  ini_exch(B, C, skB1, c_bc) | resp_exch(c_bc, C, B, skC1) |
    phase 2; let skA2 = h(skA1) in
	  let skB2 = h(skB1) in
	  let skC2 = h(skC1) in
	  ini_exch(A, B, skA2, c_ab) | resp_exch(c_ab, B, A, skB2) |
	  ini_exch(A, C, skA2, c_ac) | resp_exch(c_ac, C, A, skC2) |
	  ini_exch(B, C, skB2, c_bc) | resp_exch(c_bc, C, B, skC2) |
    phase 3; (in(c, person:bitstring); if person = A then (report_inf(person, skA1, eph_key(skA)))
    else if person = B then (report_inf(person, skB1, eph_key(skB)))
    else if person = C then (report_inf(person, skC1, eph_key(skC))) ) |
    healthCareAuthority(eph_key(skA)) | backendServer(eph_key(skA)) | phase 4
	)


(* etc. *)
